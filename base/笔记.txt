一、print_input
# 高效装包pip install keras -i http://pypi.douban.com/simple --trusted-host pypi.douban.com
1.1 格式化输出  a = '***'
               print(f'what?{a}')   # 简单高效 # 结果-what?***                       
               print('what?%s'%a)  # a是一个东西  # 结果-what?***
               print('what?{}'.format(a))  # 结果-what?***
1.2 jupyter快捷键
    # pycharm
    1.2.1 # :ctrl+/
    1.2.2 split_line: ctrl + Enter
　  1.2.3 jump_line: shift + ctrl + Enter
    1.2.4 选中  ctrl+'  可变为字符串
    # notebook
    1.2.5 # :ctrl+/
    1.2.6 运行： shift + Enter 运行完跳入下一格
    1.2.7 运行： ctrl + Enter  运行完在当前格
    1.2.8 分割cell: shift + ctrl + '-'
    1.2.9 向下合并： Esc shift + M
    1.2.10 code模式：Esc + Y
    1.2.11 Markdown模式：Esc + M
    1.2.12 Esc + a  上加cell
    1.2.13 Esc + b  下加cell
    1.2.14 Esc + dd  删除
    1.2.15 Esc + z 撤回
1.3 据类型
    1.3.1 type(value): data_type
    1.3.2 %.2 and %03d (整数前加0)
    1.3.3 print(end='...')
    1.3.4 input('information') 为字符串——>转换 number = int(input('information')
    1.3.5 str() tuple() list() int() float()  类型转换
　　
1.4 运算
    1.4.1 赋值运算，先算后赋，c+=a,c=c+a 回头
    1.4.2 逻辑运算  and  or  not  与 或 非
        1.4.2.1  and
               有0为0：0 and 1 = 0
               无0为尾数：1 and 2 = 2, 2 and 1 = 1
        1.4.2.2  or
                全为0为0：0 or 0 = 0
                无全为0为首非0：2 or 1 = 2, 1 or 2 = 1, 0 or 1 = 1

二、if_猜拳小游戏

2.1 input()输入
2.2 输入判断
2.3 电脑随机输入
2.4 结果判断
    *关于time.sleep()
        *time.sleep()在print('i', end = '')后不执行，sleep后才print;
        *唯有在print('i', end = '\n')后才执行print后sleep,因为存在缓冲区.
     所以，不能横着一个一个字母跳出来，只有纵向才可以

2.5 三目运算符
    前 if 条件 else 后
    成立运行前，不成立运行后

三、for_while循环
3.1.1 while 运用，1-100和

    while 条件：
        条件成立（True）执行代码1
        条件成立（True）执行代码2
        ……
    !!!记得加计数器，否则死循环

3.1.2 while 运用，偶数和
3.1.3 计数器累加求偶和
3.1.4 break 终止所有循环，跳出循环  吃到第4个为止
3.1.5 continue 终止本次循环
    !!!不加的话死循环!!!continue前必须加计算器
3.2 while循环嵌套

    while 条件1：
        条件1成立执行
        ……
        while 条件2：
            条件2成立执行
            !!!计数器
    !!!计数器

3.2.1 while循环嵌套运用——5X5正方形
3.2.2 while循环嵌套运用——三角形
3.2.3 9X9乘法表
3.3 for循环(不用计算器，但有序列）

    for 临时变量 in 序列：
        重复执行代码1
        重复执行代码2

3.3.1 for + if + break + continue (同while)
3.4 while_else —— 循环正常结束之后要执行代码，和while一起用

    while 条件：
        条件成立重复执行代码
    else：
        循环正常结束之后要执行代码

3.4.1 while_else + break  有break不执行else
3.4.2 while_else + continue  有continue,执行else
3.5   for_else —— 循环正常结束之后要执行代码，和for一起用,同while

    for 临时变量 in 序列：
        重复执行代码1
        重复执行代码2
    else:
        循环正常结束之后要执行代码

3.5.1 for_else + break  有break不执行(同while)
3.5.2 for_else + continue  有continue——执行(同while)

四、字符串(input()输入都是str) (字符串)不可变没法修改

4.1 定义(无代码)

    # a\b\c 区别中间换行a、b不打印\n,c有换行
    a = 'hello world!'
    b = "hello world!"
    c = '''hello world!'''
    d = 'I\'m Tom'
    e = "I'm Tom"

4.2 输出1.0 (无代码)

    4.2.1 print('Tom')
    4.2.2 print('My name is %s'%name)
    4.2.3 print(f'My name is {name}')

4.3 下标索引(从0开始列表) (无代码)  str[0]

4.4 查找(子列是否在str中,位置和次数)

    str = 'hello world and Python and Java'
    4.4.1 str.find(子串,开始位置，结束位置)  # 存在返回第一个开始位置下标，不存在为-1
    4.4.2 str.index(子串,开始位置，结束位置)   # 存在返回第一个开始位置下标，不存在报错
    4.4.3 str.count(子串,开始位置，结束位置)  # 次数
    4.4.4 str.rfind(子串,开始位置，结束位置)  # 和find()同，从右向左  # 23
    4.4.5 str.rindex(子串,开始位置，结束位置)   # 和index()同，从右向左  #23

4.5 修改(要装，原字符串不变)

    4.5.1 str2 = str1.replace('a','b',替换次数num)   # a 换成 b , str1(字符串)不可变没法修改，要str2接收
    4.5.2 list1 = str.split(分割字符,分割次数num)   # 丢失分割字符,返回列表
    4.5.3 str2 = '字符串或子列'.join(list1#列表)

    4.5.4 str2 = str1.title()   # 首字母大写
    4.5.5 str2 = str1.upper()   # 全部大写
    4.5.6 str2 = str1.lower()   # 全部小写

    4.5.7 str2 = str1.lstrip()  # 删左空白
    4.5.8 str2 = str1.rstrip()  # 删右空白
    4.5.9 str2 = str1.strip()   # 删两侧空白

    4.5.10 str2 = str1.ljust(总长,'填充')  # 左对齐
    4.5.11 str2 = str1.rjust(总长,'填充')  # 右对齐
    4.5.12 str2 = str1.center(总长,'填充') # 中间对齐

4.6 判断
    4.6.1 str1.startswith(子串,开始位置，结束位置)  # 以子串开始 True or False
    4.6.2 str1.endswith(子串,开始位置，结束位置)  # 以子串结尾 True or False
    4.6.3 str1.isalpha()  # 是否纯字母 True or False
    4.6.4 str1.isdigit()  # 是否纯数字 True or False
    4.6.5 str1.isalnum()  # 是否纯数字、字母 True or False
    4.6.6 str1.isspace()  # 是否空白 True or False  
  ## 配合filter使用,filter(str.isalpha,string) 提取string中为字母的

五、切片

str = 'abcdefghijk'
5.0 定义
5.1 序列名[开始下标:结束下标:步长(int)]    #有头无尾，为':'不为',',方向：从左到右
5.2 倒打：[][::-1] // 序列[::-1]  步长-1 ——> 从右向左取
5.3 str[:2]  str[2:]
5.4 str[-3:]
5.5 str[-4:-1]   #下标-1为最后一个且不取,方向：从左到右
5.6 str[-4:-1:-1]  # 不能选取       !!! j到不回<——h……j
    !!!选取方向和步长方向相反是取不到

六、列表 list 可改可变

6.1 定义 list = [数据1，数据2，……]
6.2 查找
    6.2.1 list[索引]
    6.2.2 list.index(数据,开始位置，结束位置)  # 同str,无find()
    6.2.3 list.count(数据)
    6.2.4 len(list)
    6.2.5 '子串' in list # True or False
    6.2.6 '子串' not in list # True or False
6.3 添加
    6.3.1 list.append('子串')  # 后加  也可list.append([列表]) 整表追加[1,2,[3,4]]
    6.3.2 list.extend('子串')  # 后加  也可list.extend([列表]) 逐一追加[1,2,3,4]  # 相当于list+子串
    6.3.3 list.insert(位置,'子串')  # 指定位置,原数据后移
6.4 删
    6.4.1 del list[索引]     /del list
    6.4.2 list.pop()/list.pop(索引)  # 有返回list[索引]
    6.4.3 list.remove('子串'#数据)
    6.4.4 list.clean()  #[]
6.5 改
    6.5.1 list[0] = 数据
    6.5.2 list.reverse()  # 倒置
    6.5.3 list.sort(reverse =True/False) // list.sorted() # 临时排,sorter(list)
6.6 复制
    list1 = list.copy() # 保留原始数据,list1 = list的话,修改list的话会修改list
6.7 遍历
    6.7.1 while遍历
       利用len(list)做条件，打印list[i]
    6.7.2 for遍历 (优选)
       for i in list
6.8 嵌套
    [[],[],[],……]
    list[0]
    list[0][1]  # 行列
    # 取一行list[0]
    # 取一列list = [x[0] for x in list]  # 用pandas和numpy方便
    6.8.1 二维添加  list[list1].append(i)
    6.8.2 二维遍历  for嵌套
6.9 简单统计
    6.9.1 max(list)
    6.9.2 min(list)
    6.9.3 sum(list)

七、元组 tuple (不可修改list)
    !!!注意单个元素 t1 = (10,) , t2 = (10) 的区别
       type(t1) = tuple , type(t2) = int
    7.1 查找  (同list,index()、count()、len()、无find())
    7.2 修改  (2, 3, [可改], 4] 二维索引可改
        t[2][0] = 5

八、字典 dictionary {键：值对,无顺序、无下标、可变}
    { key1 : value1, key2 : value2, …… }
    8.1 创建空字典  dict1 = {} / dict1 = dict()
    8.2 增 dict1[原无key] = value   key可为1，不是下标意思
    8.3 删 del dict[key] / dict.clean()
    8.4 改 dict1[原有key] = value ,同增
    8.5 查
        8.5.1 print(dict1[key]) = value
        函数法：
        8.5.2 dict1.get(key,默认值） 存在返回value，不存在返回默认值
        8.5.3 dict1.keys()  返回所有键，可遍历对象  # dict_keys(['name', 'age', 'gender', 'id'])
        8.5.4 dict1.values()  返回所有值，可遍历对象 # dict_values(['Tom', '18', '男', '001'])
        8.5.5 dict1.items()  返回所有键值对元组，可遍历对象 # dict_items([('name', 'Tom')])
        8.5.6 遍历keys  for key in dict1.keys()
        8.5.7 遍历values  for value in dict1.values()
        8.5.8 遍历items  for item in dict1.items()
        8.5.9 遍历键值对，拆包  for key,value in dict1.items()  // 返回 2个临时变量
        8.5.10 字典排序 sorted(dic,key,reverse)
        # sorted(dic.keys(),reverse)
	  # soeted(dic.values(),reverse)
	  # sorted(dic.items(),key = lambda x:x[0],reverse) items为列表套元组

九、集合 set (不重复去重、无顺序、无下标、可变)
   {value1,value2,……}
   9.1 创建空集合 set1 = set()  //不能 set1 = {} = dict1
       set1 = set('abcdef') # 无序 {'e', 'f', 'a', 'b', 'c', 'd'}

   9.2 增 set1.add(value)  // set1.update(list)
   9.3 删
       9.3.1 set1.remove(value)   # 删value,不存在报错
       9.3.2 set1.discard(value)  # 删value,不存在不报错
       9.3.3 set1.pop()  # 随机删——set1随机排
   9.4 查 in // not in  print( 10 in set1 )

十、公共操作
   10.1 运算符
       10.1.1 '+'、'*' ：str\list\tuple     无dict,返回一串\一个list\一个tuple
             #aaaaaaaaa
             #(1, 2, 1, 2, 1, 2, 1, 2, 1, 2)
             #['a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b']
       10.1.2 in、not in : str\list\tuple\dict
   10.2 len()    :str\list\tuple\dict
   10.3 del list \ del(list[0])   :str\list\tuple\dict
   10.4 max()\min()   :str\list\tuple\dict
   10.5 range(开始(不写为0),结束,步长(int))   # 有头无尾,同切片、为可遍历对象
   10.6 enumerate(可遍历对象，start=0(更改索引位置起始值))  # 返回tuple(索引位置,value)
   10.7 同1.3.5 list()、tuple()、set() 相互转

十一 、 推导式 (有规律、简化代码)
   11.1 列表推导式(无符号)
        [xx for xx in range()]
        11.1.1 list1 = [i for i in range(10)]
        11.1.2 list2 = [i for i in range(10) if i % 2 ==0] # 加筛选条件
        11.1.3 list3 = [(i,j) for i in range(2) for j in range(1,3)]   # for套for,返回元组列表
   11.2 元组推导式(无符号)
        tuple(xx for in range())
        11.2.1 tuple1 = tuple(i for i in range(3))  # 加tuple()
        11.2.2 tuple2 = tuple(i for i in range(10) if i % 2 ==0)
        11.2.3 tuple3 = tuple((i,j) for i in range(2) for j in range(1,3))# for套for,返回元组套元组
   11.3 字典推导式(无符号)
        {xx1:xx2 for …… in ……}
        11.3.1 dict1 = { i:i**2 for i in range(5)}
        11.3.2 两个列表合为一个字典
               list01 = ['name', 'age', 'gender']
               list02 = ['Tom', 20, 'man']  # len(list01) == len(list02)
               dict2 = {list01[i] : list02[i] for i in range(len(list01))}
               # {'name': 'Tom', 'age': 20, 'gender': 'man'}
        11.3.3 提取字典
               counts = {'MBP':268, 'Hp':125, 'Dell':201, 'Iphone':199}
               dict3 = {key:value for key, value in counts.items() if value >= 200}
   11.4 集合推导式(无符号)
        {xx for xx in ……}
        list1 = [1, 1, 2]  set1 = {i ** 2 for i in list1}

十二、函数 # 更高效在实现代码重用

12.1 定义 (前后2行)
     def 函数名(参数)：
        """ 功能说明"""    # 加一个Enter
        代码……
12.2 调用
12.3 参数(形参非真实(a,b)与实参真实(10,20))
12.4 返回值,返回结果给用户 return //return后代码不执行，退出当前函数  //要赋值再打印
12.5 函数嵌套，调用
12.6 局部变量和全局变量
     局部变量：函数内定义可用的变量,局部变量中从新修改不改变全局变量
               def 中 global a 后可方可修改全局变量
     全局变量：整个代码块可用(函数内外)  全大写GOO_NUM
12.7 返回值做参数
12.8 多个返回值
     不能：return 1 + return 2
     能： return 1, 2  # 返回元组(默认), 可以返回list[100,200]、dict{1:1,2:2}、tuple(100,100)

 参数：
     1.位置参数,对应位置、个数一致
     2.关键字参数,键 = 值,关键字之间不存在顺序、个数一致
       # 混用位置参数在关键字参数前
     3.缺省参数,def时赋值(gender = 'man'),可改(再传)
     4.不定长参数
       包裹位置传递 (*args) # 返回一个元组(args) //(10,)
       包裹关键字传递 (**kwargs) # user(name='Tom')    返回一个字典
     5.拆包  def return_num()
                 return 100, 200
             num1, num2 = return_num()  #接收
     6.字典拆包  a, b = dict1  # a, b返回key  dict[a] = value
     7.交换变量  a、b、c \\ a, b = b, a

十三、引用
      13.1 不变：a = b  变 a, b 不变     # 修改原数据，id变了
            13.1.1 list
            13.1.2 dict
            13.1.3 set
      13.2 可变: list a = b , a 变 b 变 id传递   # 修改原数据，原id不变
            13.2.1 int
            13.2.2 float
            13.2.3 string
            13.2.4 tuple

十四、lambda 函数(只能返回一个值)
      lambda 参数 : 表达式
      14.1 无参数  lambda : 100
      14.2 一个参数  lambda a : a   fn1 = lambda a : a   print(fn1(a))
      14.3 多个参数  lambda a,b,c : a + b +c
      14.4 默认参数  lambda a,b,c=100 : a + b + c   # c为默认参数   fn1(10, 20)
      14.5 可变位置参数  lambda *args : 表达式  // lambda *args : args  返回元组
      14.6 可变关键字参数  lambda **kwargs :  kwargs // fn1(name = 'Python', age = 20)
      14.7 运用
           14.7.1 判断：lambda a, b: a if a > b else b
           14.7.2 列表数据按key排[{key1:value1}, {key2:value2}, {key3:value3}]
                   list.sort(key = lambda x: x['key'],reverse = True/False)
                   # 字典排序， 说到底是列表排序

      ###### yield 参数： yield i 与 print(i)区别，yield i 将i存储到fun()这个可迭代对象

十五、高阶函数(一个函数的输出做另一个函数的参数)
     15.1 abs() # 求绝对值   round() # 四舍五入
          def sum_num(a, b, f):
               return f(a)+f(b)
          result = sum_num(10, -1, abs)
     15.2 map(func(函数名，不加括号), list)  # 将func作用在list每一个元素，返回可迭代器id—>list(result)
     15.3 reduce(func,list)  # func 必须有2个参数，每次func结果和下一个元素做累积计算  返回值
     15.4 filter(func, list) # 过滤掉不符和在数据  返回一个filter 对象,用list()解开,也可用于字符串,filter(str.isalpha(),string)

十六、递归(函数内部自己调用自己, 必须有出口)
      3以内累加和 = 3 + (2 以内累加和) = 3 + ( 2 + (1以内累加和 = 1//不再用函数--出口))
      层层向内至出口，再一步一步返回
      出口在return前

十七、文件操作方法(打开、关闭、读写、复制)

      (r'C:\Users\Sharon\Desktop\PythonCode\Base_plastic') ==
      (C:\\Users\\Sharon\\Desktop\\PythonCode\\Base_plastic') ==
      ('C:/Users/Sharon/Desktop/PythonCode/Base_plastic')

      17.1 open(name, mode,encoding='UTF-8')
           # name含文件名和路径,mode:只读r/不存在报错/指针在开头、写w(原文件被删除)/不存在创建/指针在开头、
             读写、a追加/指针在尾
             # 带+可读可写：
                r+(不存在报错)
                w+(不存在创建,会清空覆盖=读无)
                a+(不存在创建,结尾往后读=读无)
           # with open(file_name, mode,encoding='UTF-8') as f  == f.open()
      17.2 文件.close()  // f.close()
      17.3 文件.read()  // f.read()
           # f.read(对应字节数，可无)  print(f.read())
           # f.readline()   # 一行
           # f.readlines()  # 返回列表[]
           # 逐行读取
             for line in f:
                print(line) # 逐行打印
      17.4 文件.write(内容)  // f.writer()
      17.5 文件.seek(偏移量，起始位置),操作文件改变指针    # 起始位置：0开头，1当前位置，2结尾
      17.6 文件备份——file_operation.copy_file()
      17.7 文件(文件夹)重命名 import os   os.rename(old_name, new_name)
      17.8 文件删除 import os   os.remove(f_name)
      17.9 创建文件夹 os.mkdir('aa')
      17.10 删除文件夹 os.rmdir('aa')
      17.11 改变文件夹路径 os.chdir(目录路径)  切换到目录下
      17.12 看文件夹文件 os.listdir(目录路径)
      17.13 返回当前文件路径 os.getcwd()
      17.14 批量改文件名，用for循环
      17.15 修改path文件夹下文件名——file_operation.remodify_allfile()



十八、面向对象

      class 类名ClassName(object):   # 类名,大驼峰  ()不传参，方法才传参
           代码//def wash(self):
           ……
      haier = Washer()  # 创建对象
      haier.wash()   # 用类里面的方法
      haier.name  # 用类属性(类外引用)// haier.name = ' '(类外赋值) // self.name = ' '（类内赋值）
      print(haier)  =  print(self)   # 内存地址,self表示调用方法的对象(实例的引用)

      18.1 一个类多个对象 地址各不同：haier1的self != haier2的self
      18.2 __XX__()魔法方法
           18.2.1 __init__(self,name,age) :初始化对象定义初始对象//被自动调用
                    self.name = name
                    self.age = age  # self.age可在下方法和实例中引用
           18.2.2 __str__(self): 打印对象时（print(haier))不再返回地址，而是return后的文字
                     return '数据'
           18.2.3 __del__(self): 自动调用，删除对象
      18.3 应用
           # 用方法修改self.cook_time 并储存，用下次调用
           # 对一个对象用方法进行修改，会被属性的修改记录下来，不会像函数一样重新初始化
      18.4 继承 class A(object):    class B(A):  # B默认继承了A的所有属性和方法
           18.4.1 单继承: 继承一个父类  class B(A)
           18.4.2 多继承: 继承多个父类  class B(A, C)
                  # A, C有同名属性和同名方法,默认继承了A的同名属性和方法
           18.4.3 子类中有__init__会重写父类的同名属性和方法   // 自己独创同名属性和方法
           18.4.4 .__mro__ 查看继承关系
           18.4.5 子类调用父类的属性和方法 （# 方法中有print,调用方法不再print）
                   父类.__init__(self)  # 对父类属性进行初始化
                   父类.方法（self)  # 当方法中用到父类属性时要对父类属性进行初始化
           18.4.6  即要用子类也要用父类的例子

                   class CC(AA, BB):

                        def __init__(self):
                            self.info = 3

                        def info_cc(self):
                            self.__init__()
                            '有self不再传入self，初始化子类//在父类调用一次后，避免被覆盖\
                                                绝对初始化子类,父类怎么调用都不变'
                            print(f'运用{self.info}')

                        def info_AA(self):
                            AA.__init__(self)   # 当方法中用到父类属性时要对父类属性进行初始化有self
                            AA.info_print(self)

                        def info_BB(self):
                            BB.__init__(self)
                            BB.info_print(self)
           18.4.7 多重继承
                  class ccc(cc)   class cc(aa, bb)  子用父,父用爷
           18.4.8 super()作用
                  # 原始用法
                  def father()
                      Aa.__init__(self)
                      Aa.info_print(self)
                      Bb.__init__(self)
                      Bb.info_print(self)   # 代码冗余

                  # super(当前类名, self).__init__()
                    super(当前类名, self).info_print()   # 父类中也要添加
                  # super().__init__()
                    super().info_print()   # 父类中也要添加

           18.4.9 私有属性和方法：在属性和方法前加__, 父类不再继承给子类，同时父类.__属性/方法都访问不到
           18.4.10 私有属性的获取  def get__xx(): return __xx  # 父类内可以访问,get__xx可被访问
           18.4.11 私有属性的修改  def set__xx(): set_xx = num  # 父类内可以访问,set__xx可被访问
      18.5 多态
           子类继承父类并重写父类的方法——>导致其他类使用不同子类对应对象时产生不同的结果
           父类提供统一方法，可为空
           # 见代码 传入不同对象产生不同结果
           18.5.1 类属性和实例属性
                  类属性： class Dog(object): tooth = 10  # 直接定义,每个实例所共有
                           类名.tooth == 对象.tooth
                  实例属性：self.name = ' '
                  # 如果所有对象属性保持一致，类属性可节省内存空间
           18.5.2 类属性的修改
                  类名.类属性 = 值 // 类外   #类改全都改
                  实例对象.类属性 = 值 // 只修改该对象，不修改类
           18.5.3 类方法(含静态方法)  @classmethod //(cls)  @staticmethod//()
                  当方法中需要使用类对象(如访问类方法时)，定义类方法，一般和类属性配合使用
                   class Dog(object):
                        tooth = 10  # 类属性
                        __tooth = 10 # 私有属性

                        @classmethod
                        def get__tooth(cls):
                            return cls.__tooth

                        @staticmethod   # 不需要传递类和对象，不用使用类和对象
                        def info_print():
                            print('...')
      # __dict__ 所有类都包含的魔法方法，类.__dict__返回类内部所有属性和方法对应的字典
                  实例.__dict__返回实例属性和值对应组成的字典
十九、异常

      try:
         可能异常代码  # 尝试
      except:
          出错执行
      else:
          没有异常执行
      finally:
          无论如何都执行

      19.1 捕获指定异常  except NameError(异常名字):
      19.2 捕获多个指定异常  except (NameError, ……):   # 不知道是哪个异常
      19.3 捕获异常描述信息  except (NameError, ……) as result:  print(result)  # result就是异常信息
      19.4 捕获所有异常  except Exception as result:  # Exception 含所有异常() 不知道是什么的情况下
      19.5 异常的else：  # 没有异常是执行的代码
      19.6 异常的finally  # 无论是否异常都执行，一般为关闭文件
      19.7 异常传递(嵌套书写见代码)
           -----------cmd下运行.py文件----------------------------------------------------
           （1）打开文件夹, 在路径处输入cmd
           （2）C:\Users\Sharon\Desktop\PythonCode\Base_plastic
           （3）C:\Users\Sharon\Desktop\PythonCode\Base_plastic> python base_knowledge.py
                Tab键自动补全.py  ---> 回车运行
           ------------------------------------------------------------------------------
            import time   # 用于延缓，方便在cmd中中止
            try:
                with open('test1.txt', 'r') as f:

                    try:  (嵌套)
                        while True:
                            con = f.readline()
                            if len(con) == 0:
                                break
                            print(con)
                            time.sleep(2)
                    except:
                        # cmd中按 ctrl+c 中止
                        print('意外终止')
            except:

                print('不存在')

      19.8  自定义异常类

            class 异常名字(Exception):
                 def __init__(self,……):
                 def __str__(self):   # 设定抛出异常类时的提示信息
                        ……

            raise 异常名字()    # 抛出异常类对象=相当于打印异常对象
            except Exception  # 捕获异常
二十、模块和包
      20.1 简单  __all__变量，all列表 == from 模块 import * , all列表中没有的，无法引用
      20.2 包(放很多有联系的模块的文件夹)
           20.2.1 创建包 New->Python package->name
           20.2.2 自动创建__init__.py
           20.2.3 创建模块，定义功能
           20.2.4 导入模块  1. import 包名.模块名   调用功能 : 包名.模块名.函数
                             2. from 包名 import *   (all列表)  调用功能 : 模块名.目标

